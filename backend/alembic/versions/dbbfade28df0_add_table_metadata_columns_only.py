"""Add table metadata columns only

Revision ID: dbbfade28df0
Revises: 638371deba43
Create Date: 2025-08-03 12:49:36.836466

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector  # Add this import


# revision identifiers, used by Alembic.
revision: str = 'dbbfade28df0'
down_revision: Union[str, Sequence[str], None] = '638371deba43'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('document_chunks', sa.Column('chunk_type', sa.String(length=50), nullable=True))
    op.add_column('document_chunks', sa.Column('is_table', sa.Boolean(), nullable=True))
    op.add_column('document_chunks', sa.Column('table_name', sa.String(length=200), nullable=True))
    op.add_column('document_chunks', sa.Column('table_headers', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('document_chunks', sa.Column('table_summary', sa.Text(), nullable=True))
    op.add_column('document_chunks', sa.Column('section_hierarchy', postgresql.ARRAY(sa.String()), nullable=True))
    op.alter_column('document_chunks', 'embedding',
               existing_type=Vector(dim=768),
               type_=Vector(dim=1536),
               existing_nullable=True)
    op.drop_index(op.f('idx_document_chunks_document_id'), table_name='document_chunks')
    op.drop_index(op.f('idx_document_chunks_embedding_model'), table_name='document_chunks')
    op.create_index('idx_chunks_doc_embedding', 'document_chunks', ['document_id', 'embedding_model'], unique=False)
    op.create_index('idx_chunks_table', 'document_chunks', ['is_table'], unique=False)
    op.create_index('idx_chunks_type', 'document_chunks', ['chunk_type'], unique=False)
    op.drop_column('document_chunks', 'start_char')
    op.drop_column('document_chunks', 'section_title')
    op.drop_column('document_chunks', 'subsection_title')
    op.drop_column('document_chunks', 'end_char')
    op.add_column('documents', sa.Column('title', sa.String(length=500), nullable=True))
    op.add_column('documents', sa.Column('author', sa.String(length=200), nullable=True))
    op.add_column('documents', sa.Column('creation_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('documents', sa.Column('modification_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('documents', sa.Column('file_data', sa.LargeBinary(), nullable=True))
    op.add_column('documents', sa.Column('storage_path', sa.String(length=500), nullable=True))
    op.add_column('documents', sa.Column('storage_type', sa.String(length=20), nullable=True))
    op.add_column('documents', sa.Column('has_tables', sa.Boolean(), nullable=True))
    op.add_column('documents', sa.Column('table_count', sa.Integer(), nullable=True))
    op.add_column('documents', sa.Column('table_metadata', sa.JSON(), nullable=True))
    op.add_column('documents', sa.Column('main_tag', sa.String(length=100), nullable=True))
    op.drop_index(op.f('ix_documents_collection_name'), table_name='documents')
    op.create_index(op.f('ix_documents_main_tag'), 'documents', ['main_tag'], unique=False)
    op.drop_column('documents', 'groq_response')
    op.drop_column('documents', 'is_public')
    op.drop_column('documents', 'status')
    op.drop_column('documents', 'collection_name')
    op.create_foreign_key(None, 'search_queries', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'search_sessions', 'users', ['user_id'], ['id'])
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.drop_constraint(op.f('users_api_key_key'), 'users', type_='unique')
    op.drop_column('users', 'preferences')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'api_key')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('api_key', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('preferences', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('users_api_key_key'), 'users', ['api_key'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_constraint(None, 'search_sessions', type_='foreignkey')
    op.drop_constraint(None, 'search_queries', type_='foreignkey')
    op.add_column('documents', sa.Column('collection_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('groq_response', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_documents_main_tag'), table_name='documents')
    op.create_index(op.f('ix_documents_collection_name'), 'documents', ['collection_name'], unique=False)
    op.drop_column('documents', 'main_tag')
    op.drop_column('documents', 'table_metadata')
    op.drop_column('documents', 'table_count')
    op.drop_column('documents', 'has_tables')
    op.drop_column('documents', 'storage_type')
    op.drop_column('documents', 'storage_path')
    op.drop_column('documents', 'file_data')
    op.drop_column('documents', 'modification_date')
    op.drop_column('documents', 'creation_date')
    op.drop_column('documents', 'author')
    op.drop_column('documents', 'title')
    op.add_column('document_chunks', sa.Column('end_char', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('subsection_title', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('section_title', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('start_char', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index('idx_chunks_type', table_name='document_chunks')
    op.drop_index('idx_chunks_table', table_name='document_chunks')
    op.drop_index('idx_chunks_doc_embedding', table_name='document_chunks')
    op.create_index(op.f('idx_document_chunks_embedding_model'), 'document_chunks', ['embedding_model'], unique=False)
    op.create_index(op.f('idx_document_chunks_document_id'), 'document_chunks', ['document_id'], unique=False)
    op.alter_column('document_chunks', 'embedding',
               existing_type=Vector(dim=768),
               type_=Vector(dim=1536),
               existing_nullable=True)
    op.drop_column('document_chunks', 'section_hierarchy')
    op.drop_column('document_chunks', 'table_summary')
    op.drop_column('document_chunks', 'table_headers')
    op.drop_column('document_chunks', 'table_name')
    op.drop_column('document_chunks', 'is_table')
    op.drop_column('document_chunks', 'chunk_type')
    # ### end Alembic commands ###
