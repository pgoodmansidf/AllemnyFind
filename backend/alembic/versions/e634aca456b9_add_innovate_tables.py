"""add_innovate_tables

Revision ID: e634aca456b9
Revises: a7bbc45db8dc
Create Date: 2025-09-17 12:13:00.556967

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e634aca456b9'
down_revision: Union[str, Sequence[str], None] = 'a7bbc45db8dc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('document_contributions')
    op.drop_index('ix_summaries_id', table_name='summaries')
    op.drop_table('summaries')
    op.drop_index('idx_summary_starred', table_name='document_summaries')
    op.drop_index('idx_summary_type', table_name='document_summaries')
    op.drop_index('idx_summary_user_created', table_name='document_summaries')
    op.drop_index('ix_document_summaries_id', table_name='document_summaries')
    op.drop_index('ix_document_summaries_is_starred', table_name='document_summaries')
    op.drop_index('ix_document_summaries_processing_status', table_name='document_summaries')
    op.drop_index('ix_document_summaries_summary_type', table_name='document_summaries')
    op.drop_index('ix_document_summaries_user_id', table_name='document_summaries')
    op.drop_table('document_summaries')
    op.drop_table('document_stars')
    op.drop_table('search_stars')
    op.drop_table('contribution_likes')
    op.drop_index('ix_prescreened_users_email', table_name='prescreened_users')
    op.drop_index('ix_prescreened_users_id', table_name='prescreened_users')
    op.drop_table('prescreened_users')
    op.drop_index('idx_machinery_project', table_name='machinery')
    op.drop_index('idx_machinery_sau', table_name='machinery')
    op.drop_index('idx_machinery_sau_number', table_name='machinery')
    op.drop_index('idx_machinery_search_text', table_name='machinery')
    op.drop_index('idx_machinery_sector_manufacturer', table_name='machinery')
    op.drop_index('ix_machinery_id', table_name='machinery')
    op.drop_index('ix_machinery_manufacturer', table_name='machinery')
    op.drop_index('ix_machinery_project_name', table_name='machinery')
    op.drop_index('ix_machinery_sau_number', table_name='machinery')
    op.drop_index('ix_machinery_sau_numbers', table_name='machinery')
    op.drop_index('ix_machinery_sector', table_name='machinery')
    op.drop_table('machinery')
    op.alter_column('document_chunks', 'lexical_weights',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_chunks_content_tsvector_gin', table_name='document_chunks', postgresql_using='gin')
    op.drop_index('idx_chunks_embedding_strategy', table_name='document_chunks')
    op.drop_index('idx_chunks_keywords', table_name='document_chunks', postgresql_using='gin')
    op.drop_index('idx_chunks_lexical_weights_gin', table_name='document_chunks', postgresql_using='gin')
    op.drop_index('idx_chunks_parent_child', table_name='document_chunks')
    op.drop_index('idx_document_chunks_embedding_hnsw', table_name='document_chunks', postgresql_using='hnsw')
    op.drop_index('idx_document_chunks_embedding_ivfflat', table_name='document_chunks', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_column('document_chunks', 'table_data')
    op.drop_column('document_chunks', 'structured_data')
    op.drop_column('document_chunks', 'search_keywords')
    op.drop_column('document_chunks', 'embedding_strategy')
    op.alter_column('documents', 'project_number',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('documents', 'companies',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('documents', 'extraction_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_documents_companies_gin', table_name='documents', postgresql_using='gin')
    op.drop_index('idx_documents_content_tsvector_gin', table_name='documents', postgresql_using='gin')
    op.drop_index('idx_documents_main_city', table_name='documents')
    op.drop_index('idx_documents_main_city_trgm', table_name='documents', postgresql_using='gin')
    op.drop_index('idx_documents_project_date', table_name='documents')
    op.drop_index('idx_documents_project_number_gin', table_name='documents', postgresql_using='gin')
    op.create_index(op.f('ix_documents_main_city'), 'documents', ['main_city'], unique=False)
    op.create_index(op.f('ix_documents_project_date'), 'documents', ['project_date'], unique=False)
    op.add_column('ingestion_jobs', sa.Column('user_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'ingestion_jobs', 'users', ['user_id'], ['id'])
    op.alter_column('table_cells', 'document_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_table_cells_cell_type', table_name='table_cells')
    op.drop_index('idx_table_cells_chunk_id', table_name='table_cells')
    op.drop_index('idx_table_cells_date_value', table_name='table_cells')
    op.drop_index('idx_table_cells_document_id', table_name='table_cells')
    op.drop_index('idx_table_cells_metadata_gin', table_name='table_cells', postgresql_using='gin')
    op.drop_index('idx_table_cells_numeric_value', table_name='table_cells')
    op.drop_index('idx_table_cells_search_vector_gin', table_name='table_cells', postgresql_using='gin')
    op.drop_index('idx_table_cells_table_id', table_name='table_cells')
    op.create_index('idx_table_cells_date', 'table_cells', ['date_value'], unique=False)
    op.create_index('idx_table_cells_numeric', 'table_cells', ['numeric_value'], unique=False)
    op.create_index(op.f('ix_table_cells_chunk_id'), 'table_cells', ['chunk_id'], unique=False)
    op.create_index(op.f('ix_table_cells_document_id'), 'table_cells', ['document_id'], unique=False)
    op.create_index(op.f('ix_table_cells_id'), 'table_cells', ['id'], unique=False)
    op.create_index(op.f('ix_table_cells_table_id'), 'table_cells', ['table_id'], unique=False)
    op.drop_constraint('table_cells_document_id_fkey', 'table_cells', type_='foreignkey')
    op.drop_constraint('table_cells_chunk_id_fkey', 'table_cells', type_='foreignkey')
    op.create_foreign_key(None, 'table_cells', 'document_chunks', ['chunk_id'], ['id'])
    op.create_foreign_key(None, 'table_cells', 'documents', ['document_id'], ['id'])
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'standard'::character varying"))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'standard'::character varying"))
    op.drop_constraint(None, 'table_cells', type_='foreignkey')
    op.drop_constraint(None, 'table_cells', type_='foreignkey')
    op.create_foreign_key('table_cells_chunk_id_fkey', 'table_cells', 'document_chunks', ['chunk_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('table_cells_document_id_fkey', 'table_cells', 'documents', ['document_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_table_cells_table_id'), table_name='table_cells')
    op.drop_index(op.f('ix_table_cells_id'), table_name='table_cells')
    op.drop_index(op.f('ix_table_cells_document_id'), table_name='table_cells')
    op.drop_index(op.f('ix_table_cells_chunk_id'), table_name='table_cells')
    op.drop_index('idx_table_cells_numeric', table_name='table_cells')
    op.drop_index('idx_table_cells_date', table_name='table_cells')
    op.create_index('idx_table_cells_table_id', 'table_cells', ['table_id'], unique=False)
    op.create_index('idx_table_cells_search_vector_gin', 'table_cells', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('idx_table_cells_numeric_value', 'table_cells', ['numeric_value'], unique=False)
    op.create_index('idx_table_cells_metadata_gin', 'table_cells', ['document_metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_table_cells_document_id', 'table_cells', ['document_id'], unique=False)
    op.create_index('idx_table_cells_date_value', 'table_cells', ['date_value'], unique=False)
    op.create_index('idx_table_cells_chunk_id', 'table_cells', ['chunk_id'], unique=False)
    op.create_index('idx_table_cells_cell_type', 'table_cells', ['cell_type'], unique=False)
    op.alter_column('table_cells', 'document_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint(None, 'ingestion_jobs', type_='foreignkey')
    op.drop_column('ingestion_jobs', 'user_id')
    op.drop_index(op.f('ix_documents_project_date'), table_name='documents')
    op.drop_index(op.f('ix_documents_main_city'), table_name='documents')
    op.create_index('idx_documents_project_number_gin', 'documents', ['project_number'], unique=False, postgresql_using='gin')
    op.create_index('idx_documents_project_date', 'documents', ['project_date'], unique=False)
    op.create_index('idx_documents_main_city_trgm', 'documents', ['main_city'], unique=False, postgresql_using='gin')
    op.create_index('idx_documents_main_city', 'documents', ['main_city'], unique=False)
    op.create_index('idx_documents_content_tsvector_gin', 'documents', ['content_tsvector'], unique=False, postgresql_using='gin')
    op.create_index('idx_documents_companies_gin', 'documents', ['companies'], unique=False, postgresql_using='gin')
    op.alter_column('documents', 'extraction_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('documents', 'companies',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('documents', 'project_number',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.add_column('document_chunks', sa.Column('embedding_strategy', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('search_keywords', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('structured_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('document_chunks', sa.Column('table_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index('idx_document_chunks_embedding_ivfflat', 'document_chunks', ['embedding'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.create_index('idx_document_chunks_embedding_hnsw', 'document_chunks', ['embedding'], unique=False, postgresql_using='hnsw')
    op.create_index('idx_chunks_parent_child', 'document_chunks', ['parent_chunk_id', 'child_chunk_ids'], unique=False)
    op.create_index('idx_chunks_lexical_weights_gin', 'document_chunks', ['lexical_weights'], unique=False, postgresql_using='gin')
    op.create_index('idx_chunks_keywords', 'document_chunks', ['search_keywords'], unique=False, postgresql_using='gin')
    op.create_index('idx_chunks_embedding_strategy', 'document_chunks', ['embedding_strategy'], unique=False)
    op.create_index('idx_chunks_content_tsvector_gin', 'document_chunks', ['content_tsvector'], unique=False, postgresql_using='gin')
    op.alter_column('document_chunks', 'lexical_weights',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_table('machinery',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sector', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('project_name', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('sau_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('manufacturer', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('origin', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cost', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('cost_index', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('production_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_update', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('sau_numbers', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('project_numbers', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), autoincrement=False, nullable=True),
    sa.Column('embedding_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('search_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('machinery_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='machinery_pkey')
    )
    op.create_index('ix_machinery_sector', 'machinery', ['sector'], unique=False)
    op.create_index('ix_machinery_sau_numbers', 'machinery', ['sau_numbers'], unique=False)
    op.create_index('ix_machinery_sau_number', 'machinery', ['sau_number'], unique=False)
    op.create_index('ix_machinery_project_name', 'machinery', ['project_name'], unique=False)
    op.create_index('ix_machinery_manufacturer', 'machinery', ['manufacturer'], unique=False)
    op.create_index('ix_machinery_id', 'machinery', ['id'], unique=False)
    op.create_index('idx_machinery_sector_manufacturer', 'machinery', ['sector', 'manufacturer'], unique=False)
    op.create_index('idx_machinery_search_text', 'machinery', ['search_text'], unique=False)
    op.create_index('idx_machinery_sau_number', 'machinery', ['sau_number'], unique=False)
    op.create_index('idx_machinery_sau', 'machinery', ['sau_numbers'], unique=False)
    op.create_index('idx_machinery_project', 'machinery', ['project_name'], unique=False)
    op.create_table('prescreened_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_registered', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='prescreened_users_pkey')
    )
    op.create_index('ix_prescreened_users_id', 'prescreened_users', ['id'], unique=False)
    op.create_index('ix_prescreened_users_email', 'prescreened_users', ['email'], unique=True)
    op.create_table('contribution_likes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contribution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('liked_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contribution_id'], ['document_contributions.id'], name='contribution_likes_contribution_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='contribution_likes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contribution_likes_pkey'),
    sa.UniqueConstraint('user_id', 'contribution_id', name='_user_contribution_like_uc')
    )
    op.create_table('search_stars',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('search_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('starred_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['search_id'], ['search_queries.id'], name='search_stars_search_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='search_stars_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='search_stars_pkey'),
    sa.UniqueConstraint('user_id', 'search_id', name='_user_search_star_uc')
    )
    op.create_table('document_stars',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('starred_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('search_query', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_stars_document_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='document_stars_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_stars_pkey'),
    sa.UniqueConstraint('user_id', 'document_id', name='_user_document_star_uc')
    )
    op.create_table('document_summaries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('summary_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('document_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=False),
    sa.Column('document_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('executive_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('key_findings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trends', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('statistics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conclusions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('full_summary', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('citations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_documents', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('summary_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('topics', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_starred', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='document_summaries_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_summaries_pkey')
    )
    op.create_index('ix_document_summaries_user_id', 'document_summaries', ['user_id'], unique=False)
    op.create_index('ix_document_summaries_summary_type', 'document_summaries', ['summary_type'], unique=False)
    op.create_index('ix_document_summaries_processing_status', 'document_summaries', ['processing_status'], unique=False)
    op.create_index('ix_document_summaries_is_starred', 'document_summaries', ['is_starred'], unique=False)
    op.create_index('ix_document_summaries_id', 'document_summaries', ['id'], unique=False)
    op.create_index('idx_summary_user_created', 'document_summaries', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_summary_type', 'document_summaries', ['summary_type'], unique=False)
    op.create_index('idx_summary_starred', 'document_summaries', ['user_id', 'is_starred'], unique=False)
    op.create_table('summaries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=False),
    sa.Column('document_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('summary_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key_findings', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('statistics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('topics', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_starred', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='summaries_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='summaries_pkey')
    )
    op.create_index('ix_summaries_id', 'summaries', ['id'], unique=False)
    op.create_table('document_contributions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_edited', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_contributions_document_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='document_contributions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_contributions_pkey')
    )
    # ### end Alembic commands ###
