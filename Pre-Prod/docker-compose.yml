services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: allemny_postgres
    environment:
      POSTGRES_DB: allemny_find_v2
      POSTGRES_USER: allemny_find
      POSTGRES_PASSWORD: ${DB_PASSWORD:-AFbqSrE?h8bPjSCs9#}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U allemny_find -d allemny_find_v2"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - allemny-network
    restart: unless-stopped

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: allemny_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - allemny-network
    restart: unless-stopped

  # Ollama for local embeddings
  ollama:
    image: ollama/ollama:latest
    container_name: allemny_ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - allemny-network
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: ..
      dockerfile: Pre-Prod/Dockerfile.backend
    container_name: allemny_backend
    environment:
      - DATABASE_URL=postgresql://allemny_find:${DB_PASSWORD:-AFbqSrE?h8bPjSCs9#}@postgres:5432/allemny_find_v2
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - GROQ_API_KEY=${GROQ_API_KEY:-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}
      - SECRET_KEY=${SECRET_KEY:-allemny-find-super-secret-key-change-in-production-2024}
      - ENVIRONMENT=production
    ports:
      - "${BACKEND_PORT:-8002}:8002"
    volumes:
      - document_storage:/app/document_storage
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - allemny-network
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ..
      dockerfile: Pre-Prod/Dockerfile.frontend
    container_name: allemny_frontend
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-3001}
      - BACKEND_PORT=${BACKEND_PORT:-8002}
    ports:
      - "${FRONTEND_PORT:-3001}:${FRONTEND_PORT:-3001}"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${FRONTEND_PORT:-3001}/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - allemny-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: allemny_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - allemny-network
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  document_storage:
    driver: local
  backend_logs:
    driver: local

networks:
  allemny-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16